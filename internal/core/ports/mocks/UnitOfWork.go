// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	ports "delivery/internal/core/ports"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/avito-tech/go-transaction-manager/drivers/sqlx/v2"
)

// UnitOfWork is an autogenerated mock type for the UnitOfWork type
type UnitOfWork struct {
	mock.Mock
}

type UnitOfWork_Expecter struct {
	mock *mock.Mock
}

func (_m *UnitOfWork) EXPECT() *UnitOfWork_Expecter {
	return &UnitOfWork_Expecter{mock: &_m.Mock}
}

// CourierRepo provides a mock function with no fields
func (_m *UnitOfWork) CourierRepo() ports.CourierRepo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CourierRepo")
	}

	var r0 ports.CourierRepo
	if rf, ok := ret.Get(0).(func() ports.CourierRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.CourierRepo)
		}
	}

	return r0
}

// UnitOfWork_CourierRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CourierRepo'
type UnitOfWork_CourierRepo_Call struct {
	*mock.Call
}

// CourierRepo is a helper method to define mock.On call
func (_e *UnitOfWork_Expecter) CourierRepo() *UnitOfWork_CourierRepo_Call {
	return &UnitOfWork_CourierRepo_Call{Call: _e.mock.On("CourierRepo")}
}

func (_c *UnitOfWork_CourierRepo_Call) Run(run func()) *UnitOfWork_CourierRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnitOfWork_CourierRepo_Call) Return(_a0 ports.CourierRepo) *UnitOfWork_CourierRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_CourierRepo_Call) RunAndReturn(run func() ports.CourierRepo) *UnitOfWork_CourierRepo_Call {
	_c.Call.Return(run)
	return _c
}

// DefaultTrOrDB provides a mock function with given fields: ctx, db
func (_m *UnitOfWork) DefaultTrOrDB(ctx context.Context, db sqlx.Tr) sqlx.Tr {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for DefaultTrOrDB")
	}

	var r0 sqlx.Tr
	if rf, ok := ret.Get(0).(func(context.Context, sqlx.Tr) sqlx.Tr); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlx.Tr)
		}
	}

	return r0
}

// UnitOfWork_DefaultTrOrDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultTrOrDB'
type UnitOfWork_DefaultTrOrDB_Call struct {
	*mock.Call
}

// DefaultTrOrDB is a helper method to define mock.On call
//   - ctx context.Context
//   - db sqlx.Tr
func (_e *UnitOfWork_Expecter) DefaultTrOrDB(ctx interface{}, db interface{}) *UnitOfWork_DefaultTrOrDB_Call {
	return &UnitOfWork_DefaultTrOrDB_Call{Call: _e.mock.On("DefaultTrOrDB", ctx, db)}
}

func (_c *UnitOfWork_DefaultTrOrDB_Call) Run(run func(ctx context.Context, db sqlx.Tr)) *UnitOfWork_DefaultTrOrDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlx.Tr))
	})
	return _c
}

func (_c *UnitOfWork_DefaultTrOrDB_Call) Return(_a0 sqlx.Tr) *UnitOfWork_DefaultTrOrDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_DefaultTrOrDB_Call) RunAndReturn(run func(context.Context, sqlx.Tr) sqlx.Tr) *UnitOfWork_DefaultTrOrDB_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function with given fields: ctx, fn
func (_m *UnitOfWork) Do(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWork_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type UnitOfWork_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context) error
func (_e *UnitOfWork_Expecter) Do(ctx interface{}, fn interface{}) *UnitOfWork_Do_Call {
	return &UnitOfWork_Do_Call{Call: _e.mock.On("Do", ctx, fn)}
}

func (_c *UnitOfWork_Do_Call) Run(run func(ctx context.Context, fn func(context.Context) error)) *UnitOfWork_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *UnitOfWork_Do_Call) Return(_a0 error) *UnitOfWork_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_Do_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *UnitOfWork_Do_Call {
	_c.Call.Return(run)
	return _c
}

// OrderRepo provides a mock function with no fields
func (_m *UnitOfWork) OrderRepo() ports.OrderRepo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OrderRepo")
	}

	var r0 ports.OrderRepo
	if rf, ok := ret.Get(0).(func() ports.OrderRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.OrderRepo)
		}
	}

	return r0
}

// UnitOfWork_OrderRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderRepo'
type UnitOfWork_OrderRepo_Call struct {
	*mock.Call
}

// OrderRepo is a helper method to define mock.On call
func (_e *UnitOfWork_Expecter) OrderRepo() *UnitOfWork_OrderRepo_Call {
	return &UnitOfWork_OrderRepo_Call{Call: _e.mock.On("OrderRepo")}
}

func (_c *UnitOfWork_OrderRepo_Call) Run(run func()) *UnitOfWork_OrderRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnitOfWork_OrderRepo_Call) Return(_a0 ports.OrderRepo) *UnitOfWork_OrderRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_OrderRepo_Call) RunAndReturn(run func() ports.OrderRepo) *UnitOfWork_OrderRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewUnitOfWork creates a new instance of UnitOfWork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnitOfWork(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnitOfWork {
	mock := &UnitOfWork{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
