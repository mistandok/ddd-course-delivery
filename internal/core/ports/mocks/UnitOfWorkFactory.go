// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	ports "delivery/internal/core/ports"

	mock "github.com/stretchr/testify/mock"
)

// UnitOfWorkFactory is an autogenerated mock type for the UnitOfWorkFactory type
type UnitOfWorkFactory struct {
	mock.Mock
}

type UnitOfWorkFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *UnitOfWorkFactory) EXPECT() *UnitOfWorkFactory_Expecter {
	return &UnitOfWorkFactory_Expecter{mock: &_m.Mock}
}

// NewUOW provides a mock function with no fields
func (_m *UnitOfWorkFactory) NewUOW() ports.UnitOfWork {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewUOW")
	}

	var r0 ports.UnitOfWork
	if rf, ok := ret.Get(0).(func() ports.UnitOfWork); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.UnitOfWork)
		}
	}

	return r0
}

// UnitOfWorkFactory_NewUOW_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewUOW'
type UnitOfWorkFactory_NewUOW_Call struct {
	*mock.Call
}

// NewUOW is a helper method to define mock.On call
func (_e *UnitOfWorkFactory_Expecter) NewUOW() *UnitOfWorkFactory_NewUOW_Call {
	return &UnitOfWorkFactory_NewUOW_Call{Call: _e.mock.On("NewUOW")}
}

func (_c *UnitOfWorkFactory_NewUOW_Call) Run(run func()) *UnitOfWorkFactory_NewUOW_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnitOfWorkFactory_NewUOW_Call) Return(_a0 ports.UnitOfWork) *UnitOfWorkFactory_NewUOW_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWorkFactory_NewUOW_Call) RunAndReturn(run func() ports.UnitOfWork) *UnitOfWorkFactory_NewUOW_Call {
	_c.Call.Return(run)
	return _c
}

// NewUnitOfWorkFactory creates a new instance of UnitOfWorkFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnitOfWorkFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnitOfWorkFactory {
	mock := &UnitOfWorkFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
